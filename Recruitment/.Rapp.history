gsdesign.binomial(c(1),.08,.012,sig.level=0.1,power=0.8,alternative="one.sided")
?gsdesign.binomial(c(1),.08,.012,sig.level=0.1,power=0.8,alternative="one.sided")
")
install.packages("SampleSize4ClinicalTrials ")
library(SampleSize4ClinicalTrials)
install.packages("SampleSize4ClinicalTrials")
library(SampleSize4ClinicalTrials)
ssc(cat="m",design=3,ratio=1,alpha=0.05,power=0.9,sigma=1,theta=0,delta=0.5)
ssc(cat="P",design=3,ratio=1,alpha=0.05,power=0.9,sigma=1,theta=0,delta=0.5)
ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.08theta=0,delta=0.5)
ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.08,theta=0,delta=0.5)
ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.08,theta=0,delta=0.04)
gsdesign.binomial(c(1),.08,.012,sig.level=0.1,power=0.8,alternative="one.sided")
gsdesign.binomial(c(1),.08,.012,sig.level=0.05,power=0.9,alternative="one.sided")
gsdesign.binomial(c(1),.08,.011,sig.level=0.05,power=0.9,alternative="one.sided")
gsdesign.binomial(c(1),.08,.011,sig.level=0.05,power=0.9,alternative="two.sided")
ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.08,theta=0,delta=0.04)
summary(ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.08,theta=0,delta=0.04))
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.08,theta=0,delta=0.04)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.08,theta=0.04,delta=0)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.12,theta=0.04,delta=0)
gsdesign.binomial(c(1),.08,.12,sig.level=0.05,power=0.9,alternative="two.sided")
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.12,theta=0.04,delta=0)
gsdesign.binomial(c(1),.08,.12,sig.level=0.05,power=0.9,alternative="two.sided")
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.12,theta=0.04,delta=0)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.12,theta=0.04)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.08,theta=0.04)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.08,theta=0.04)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.012,theta=0.04)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.12,theta=0.04)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08,theta=0.04)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08,theta=1)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08,theta=0.1)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08,theta=0.04)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08,theta=0.035)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08,theta=0.036)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08,theta=0.037)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08,theta=0.038)
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08,theta=0.039)
gsdesign.binomial(c(1),.08,.12,sig.level=0.05,power=0.9,alternative="two.sided")
ssc(cat="p",design=1,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08,theta=0.04)
gsdesign.binomial(c(1),.08,.12,sig.level=0.05,power=0.9,alternative="two.sided")
ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08,theta=0.04)
ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08,delta=0.04)
ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.9,p1=0.12,p2=0.08,delta=0.04,theta=0)
ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.08,delta=0.04,theta=0)
ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.08,delta=0.04,theta=0.01)
ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.08,delta=0.04,theta=0)
ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.08,delta=0.05,theta=0)
ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.8,p1=0.08,p2=0.08,delta=0.05,theta=0)
ssc(cat="p",design=3,ratio=1,alpha=0.1,power=0.8,p1=0.08,p2=0.08,delta=0.05,theta=0)
gsdesign.binomial(c(1),.08,.12,sig.level=0.1,power=0.8,alternative="two.sided")
gsdesign.binomial(c(1),.08,.12,sig.level=0.1,power=0.8,alternative="one.sided")
gsdesign.binomial(c(1),.08,.13,sig.level=0.1,power=0.8,alternative="one.sided")
gsdesign.binomial(c(1),.08,.14,sig.level=0.1,power=0.8,alternative="one.sided")
ssc(cat="p",design=3,ratio=1,alpha=0.1,power=0.8,p1=0.08,p2=0.08,delta=0.06,theta=0)
gsdesign.binomial(c(1),.08,.14,sig.level=0.1,power=0.8,alternative="one.sided")
ssc(cat="p",design=3,ratio=1,alpha=0.1,power=0.8,p1=0.08,p2=0.08,delta=0.06,theta=0)
gsdesign.binomial(c(1),.08,.14,sig.level=0.1,power=0.8,alternative="one.sided")
ssc(cat="p",design=3,ratio=1,alpha=0.1,power=0.8,p1=0.08,p2=0.08,delta=0.06,theta=0)
gsdesign.binomial(c(1),.08,.15,sig.level=0.1,power=0.8,alternative="one.sided")
ssc(cat="p",design=3,ratio=1,alpha=0.1,power=0.8,p1=0.08,p2=0.08,delta=0.06,theta=0)
185*2
370*1.05
c(70,42,60,98)
c(70,42,60,98)*4
(c(70,42,60,98)*4)/10
(c(70,42,60,98)*4)
10/(c(70,42,60,98)*4)
mean(10/(c(70,42,60,98)*4))
nSite <- 4#
rpm <- 10#
openRate <- 1#
maxTime <- 12#
folUp <- 3#
penal <- 0.5#
rec <- rec.forcast(nSite,rpm,openRate,maxTime);rec
abline(h=seq(0,400,50),v=c(0,12,3))
rec <- rec.forcast(nSite,rpm,openRate,maxTime);rec
abline(h=seq(0,400,50),v=c(0,12,3),col="gray",lty=2)
abline(h=seq(0,400,50),v=seq(0,12,3),col="gray",lty=2)
ssc(cat="p",design=3,ratio=1,alpha=0.1,power=0.8,p1=0.08,p2=0.08,delta=0.06,theta=0)
ssc(cat="p",design=3,ratio=1,alpha=0.1,power=0.9,p1=0.08,p2=0.08,delta=0.06,theta=0)
ssc(cat="p",design=3,ratio=1,alpha=0.05,power=0.9,p1=0.08,p2=0.08,delta=0.06,theta=0)
1800/4
950/30.44
32*30.44
31*30.44
31*31
31*7
30*30
q()
#install.packages("shiny")#
library(shiny)#
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
  titlePanel("Recruitment Estiamtes"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500)#
    ),#
#
    mainPanel(#
      plotOutput("distPlot")#
    )#
  )#
)#
#############
sidebarLayout(position = "right",#
  sidebarPanel(#
    # Inputs excluded for brevity#
  ),#
  mainPanel(#
    # Outputs excluded for brevity #
  )#
)#
#
shinyApp(ui, server)
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
  titlePanel("Recruitment Estiamtes"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500)#
    ),#
#
    mainPanel(#
      plotOutput("distPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
}#
shinyApp(ui, server)
#install.packages("shiny")#
library(shiny)#
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
  titlePanel("Recruitment Estiamtes"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500)#
    ),#
#
    mainPanel(#
      plotOutput("distPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
   observeEvent(input$close, {#
    js$closeWindow()#
    stopApp()#
  })#
#
}#
shinyApp(ui, server)
#install.packages("shiny")#
library(shiny)#
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
  titlePanel("Recruitment Estiamtes"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
      buttonInput(#
      id = 'close',#
      type = "button",#
      class = "btn action-button",#
      onclick = "setTimeout(function(){window.close();},500);",  # close browser#
      "Close window"#
    )#
    ),#
#
    mainPanel(#
      plotOutput("distPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
   observe({#
      if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
?SLIDERiNPUT
?sliderInput
#install.packages("shiny")#
library(shiny)#
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
  titlePanel("Recruitment Estiamtes"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
      actionButton(#
      id = 'close',#
      type = "button",#
      onclick = "setTimeout(function(){window.close();},500);",  # close browser#
      "Close window"#
    )#
    ),#
#
    mainPanel(#
      plotOutput("distPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
   observe({#
      if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
#install.packages("shiny")#
library(shiny)#
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
  titlePanel("Recruitment Estiamtes"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
      actionButton(id = "close")#
    ),#
#
    mainPanel(#
      plotOutput("distPlot")#
    )#
  )#
)
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
  titlePanel("Recruitment Estiamtes"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
      actionButton("close")#
    ),#
#
    mainPanel(#
      plotOutput("distPlot")#
    )#
  )#
)
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
  titlePanel("Recruitment Estiamtes"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
#
      sliderInput("obs", "Number of observations:",  #
                  min = 1, max = 1000, value = 500),#
      actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("distPlot")#
    )#
  )#
)
server <- function(input, output) {#
   observe({#
      if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
getwd()
setwd("Dropbox/Jackson SAC/Projects/Rshiny/Recruitment")
ls()
ls
dir()
source("Dropbox/Jackson SAC/Projects/Rshiny/Recruitment/recForcast.R")
setwd("Dropbox/Jackson SAC/Projects/Rshiny/Recruitment")
source("recForcast.R")
source("Dropbox/Jackson SAC/Projects/Rshiny/Recruitmenr/recForcast.R")
setwd("Dropbox/Jackson SAC/Projects/Rshiny/Recruitment")
setwd("Dropbox")
getwd()
setwd("Dropbox/Jackson SAC/Projects/Rshiny/Recruitment")
setwd("Dropbox")
q()
rec.forcast<-function(N.site,rpm,open.rate,Max.Time,penal=0.5,plot=TRUE,...){ #
#
## Getting the number of open sites per month#
open.site<-seq(1,N.site,by=open.rate)#
if(max(open.site)!=N.site) open.site <- c(open.site,N.site)#
open.site<-c(open.site,rep(N.site,Max.Time-length(open.site)))#
### Basic average rate per site approach#
month.rate<-open.site*rpm#
#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0,month.rate))*penal#
month.rate <- month.rate-penalty#
#
cum.rec<-round(cumsum(month.rate))#
month.rate <- diff(c(0,cum.rec))#
#
rec<-data.frame("Monthly Rec"=month.rate,"Cumualtive Rec."=cum.rec)#
#
if(plot) plot(cum.rec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,...)#
#
return(rec)#
#
}
rec <- rec.forcast(20,1,1,12)
rec <- rec.forcast(20,0.5,1,12)
rec <- rec.forcast(20,0.5,1,24)
rec
npat <- max(rec[,2])
nmon <- nrow(rec)
npat
npat/5
npat/125
round(npat/125)
25*round(npat/125)
pat.mon <- 3*round(nmon/18)
pat.mon
mon.by <- 3*round(nmon/18)
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
rec.forcast<-function(N.site,rpm,open.rate,Max.Time,penal=0.5,plot=TRUE,...){ #
#
## Getting the number of open sites per month#
open.site<-seq(1,N.site,by=open.rate)#
if(max(open.site)!=N.site) open.site <- c(open.site,N.site)#
open.site<-c(open.site,rep(N.site,Max.Time-length(open.site)))#
### Basic average rate per site approach#
month.rate<-open.site*rpm#
#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0,month.rate))*penal#
month.rate <- month.rate-penalty#
#
cum.rec<-round(cumsum(month.rate))#
month.rate <- diff(c(0,cum.rec))#
#
rec<-data.frame("Monthly Rec"=month.rate,"Cumualtive Rec."=cum.rec)#
#
if(plot) plot(cum.rec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,...)#
#
return(rec)#
#
}#
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("nSite", "Number of Sites:",  #
                  min = 1, max = 150, value = 5),#
#
      sliderInput("rpm", "Average Monthly Recruitment",  #
                  min = 0.1, max = 10, value = 1),#
#
      sliderInput("openRate", "Rate of Opening sites (per month):",  #
                  min = 1, max = 5, value = 2),#
#
      sliderInput("maxTime", "Length of Recruitment (months):",  #
                  min = 1, max = 120, value = 12),#
		## Add a stop button for development	        #
      actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	rec <- eventReactive(input$go,{ #
		rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
		})#
	## Plot#
	output$recPlot <- renderPlot({	#
		rec <- rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		## getting guidelines#
		npat <- max(rec[,2])#
		nmon <- nrow(rec)#
		pat.by <- 25*round(npat/125)#
		mon.by <- 3*round(nmon/18)#
		seq(0,npat,pat.by)#
		abline(h=seq(0,npat,by=pat.by),v=seq(0,nmon,mon.by),lty=2,col="lightgray",lwd=3)#
		})#
	### Stopping App#
   observe({#
      if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
abline(h=seq(0,npat,by=pat.by),v=seq(0,nmon,by=mon.by),lty=2,col="lightgray",lwd=3)
npat <- max(rec[,2])#
		nmon <- nrow(rec)#
		pat.by <- 25*round(npat/125)#
		mon.by <- 3*round(nmon/18)
seq(0,npat,pat.by)
abline(h=seq(0,npat,by=pat.by),v=seq(0,nmon,by=mon.by),lty=2,col="lightgray",lwd=3)
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
rec.forcast<-function(N.site,rpm,open.rate,Max.Time,penal=0.5,plot=TRUE,...){ #
#
## Getting the number of open sites per month#
open.site<-seq(1,N.site,by=open.rate)#
if(max(open.site)!=N.site) open.site <- c(open.site,N.site)#
open.site<-c(open.site,rep(N.site,Max.Time-length(open.site)))#
### Basic average rate per site approach#
month.rate<-open.site*rpm#
#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0,month.rate))*penal#
month.rate <- month.rate-penalty#
#
cum.rec<-round(cumsum(month.rate))#
month.rate <- diff(c(0,cum.rec))#
#
rec<-data.frame("Monthly Rec"=month.rate,"Cumualtive Rec."=cum.rec)#
#
if(plot) plot(cum.rec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,...)#
#
return(rec)#
#
}#
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("nSite", "Number of Sites:",  #
                  min = 1, max = 150, value = 5),#
#
      sliderInput("rpm", "Average Monthly Recruitment",  #
                  min = 0.1, max = 10, value = 1),#
#
      sliderInput("openRate", "Rate of Opening sites (per month):",  #
                  min = 1, max = 5, value = 2),#
#
      sliderInput("maxTime", "Length of Recruitment (months):",  #
                  min = 1, max = 120, value = 12),#
		## Add a stop button for development	        #
      actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	rec <- eventReactive(input$go,{ #
		rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
		})#
	## Plot#
	output$recPlot <- renderPlot({	#
		rec <- rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		## getting guidelines#
		npat <- max(rec[,2])#
		nmon <- nrow(rec)#
		pat.by <- 25*round(npat/125)#
		mon.by <- 3*round(nmon/18)#
		abline(h=seq(0,npat,by=pat.by),v=seq(0,nmon,by=mon.by),lty=2,col="lightgray",lwd=3)#
		})#
	### Stopping App#
   observe({#
      if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
rec.forcast<-function(N.site,rpm,open.rate,Max.Time,penal=0.5,plot=TRUE,...){ #
#
## Getting the number of open sites per month#
open.site<-seq(1,N.site,by=open.rate)#
if(max(open.site)!=N.site) open.site <- c(open.site,N.site)#
open.site<-c(open.site,rep(N.site,Max.Time-length(open.site)))#
### Basic average rate per site approach#
month.rate<-open.site*rpm#
#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0,month.rate))*penal#
month.rate <- month.rate-penalty#
#
cum.rec<-round(cumsum(month.rate))#
month.rate <- diff(c(0,cum.rec))#
#
rec<-data.frame("Monthly Rec"=month.rate,"Cumualtive Rec."=cum.rec)#
#
if(plot) plot(cum.rec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,...)#
#
return(rec)#
#
}#
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("nSite", "Number of Sites:",  #
                  min = 1, max = 150, value = 5),#
#
      sliderInput("rpm", "Average Monthly Recruitment",  #
                  min = 0.1, max = 10, value = 1),#
#
      sliderInput("openRate", "Rate of Opening sites (per month):",  #
                  min = 1, max = 5, value = 2),#
#
      sliderInput("maxTime", "Length of Recruitment (months):",  #
                  min = 1, max = 120, value = 12),#
		## Add a stop button for development	        #
      actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	rec <- eventReactive(input$go,{ #
		rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
		})#
	## Plot#
	output$recPlot <- renderPlot({	#
		rec <- rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		## getting guidelines#
		npat <- max(rec[,2])#
		nmon <- nrow(rec)#
		pat.by <- 25*round(npat/125)#
		mon.by <- 3*round(nmon/18)#
		#abline(h=seq(0,npat,by=pat.by),v=seq(0,nmon,by=mon.by),lty=2,col="lightgray",lwd=3)#
		})#
	### Stopping App#
   observe({#
      if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
rec.forcast<-function(N.site,rpm,open.rate,Max.Time,penal=0.5,plot=TRUE,...){ #
#
## Getting the number of open sites per month#
open.site<-seq(1,N.site,by=open.rate)#
if(max(open.site)!=N.site) open.site <- c(open.site,N.site)#
open.site<-c(open.site,rep(N.site,Max.Time-length(open.site)))#
### Basic average rate per site approach#
month.rate<-open.site*rpm#
#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0,month.rate))*penal#
month.rate <- month.rate-penalty#
#
cum.rec<-round(cumsum(month.rate))#
month.rate <- diff(c(0,cum.rec))#
#
rec<-data.frame("Monthly Rec"=month.rate,"Cumualtive Rec."=cum.rec)#
#
if(plot) plot(cum.rec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,...)#
#
return(rec)#
#
}#
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("nSite", "Number of Sites:",  #
                  min = 1, max = 150, value = 5),#
#
      sliderInput("rpm", "Average Monthly Recruitment",  #
                  min = 0.1, max = 10, value = 1),#
#
      sliderInput("openRate", "Rate of Opening sites (per month):",  #
                  min = 1, max = 5, value = 2),#
#
      sliderInput("maxTime", "Length of Recruitment (months):",  #
                  min = 1, max = 120, value = 12),#
		## Add a stop button for development	        #
      actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	rec <- eventReactive(input$go,{ #
		rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
		})#
	## Plot#
	output$recPlot <- renderPlot({	#
		rec <- rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		## getting guidelines#
		npat <- max(rec[,2])#
		nmon <- nrow(rec)#
		pat.by <- 25*round(npat/125)#
		mon.by <- 3*round(nmon/18)#
		abline(h=seq(0,npat,by=pat.by),lty=2,col="lightgray",lwd=3)#
		#v=seq(0,nmon,by=mon.by)#
		})#
	### Stopping App#
   observe({#
      if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
rec.forcast<-function(N.site,rpm,open.rate,Max.Time,penal=0.5,plot=TRUE,...){ #
#
## Getting the number of open sites per month#
open.site<-seq(1,N.site,by=open.rate)#
if(max(open.site)!=N.site) open.site <- c(open.site,N.site)#
open.site<-c(open.site,rep(N.site,Max.Time-length(open.site)))#
### Basic average rate per site approach#
month.rate<-open.site*rpm#
#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0,month.rate))*penal#
month.rate <- month.rate-penalty#
#
cum.rec<-round(cumsum(month.rate))#
month.rate <- diff(c(0,cum.rec))#
#
rec<-data.frame("Monthly Rec"=month.rate,"Cumualtive Rec."=cum.rec)#
#
if(plot) plot(cum.rec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,...)#
#
return(rec)#
#
}#
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("nSite", "Number of Sites:",  #
                  min = 1, max = 150, value = 5),#
#
      sliderInput("rpm", "Average Monthly Recruitment",  #
                  min = 0.1, max = 10, value = 1),#
#
      sliderInput("openRate", "Rate of Opening sites (per month):",  #
                  min = 1, max = 5, value = 2),#
#
      sliderInput("maxTime", "Length of Recruitment (months):",  #
                  min = 1, max = 120, value = 12),#
		## Add a stop button for development	        #
      actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	rec <- eventReactive(input$go,{ #
		rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
		})#
	## Plot#
	output$recPlot <- renderPlot({	#
		rec <- rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		## getting guidelines#
		npat <- max(rec[,2])#
		nmon <- nrow(rec)#
		pat.by <- 25*round(npat/125)#
		mon.by <- 3*round(nmon/18)#
		abline(h=seq(0,npat,by=25),lty=2,col="lightgray",lwd=3)#
		#v=seq(0,nmon,by=mon.by)#
		})#
	### Stopping App#
   observe({#
      if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
pat.by
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
rec.forcast<-function(N.site,rpm,open.rate,Max.Time,penal=0.5,plot=TRUE,...){ #
#
## Getting the number of open sites per month#
open.site<-seq(1,N.site,by=open.rate)#
if(max(open.site)!=N.site) open.site <- c(open.site,N.site)#
open.site<-c(open.site,rep(N.site,Max.Time-length(open.site)))#
### Basic average rate per site approach#
month.rate<-open.site*rpm#
#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0,month.rate))*penal#
month.rate <- month.rate-penalty#
#
cum.rec<-round(cumsum(month.rate))#
month.rate <- diff(c(0,cum.rec))#
#
rec<-data.frame("Monthly Rec"=month.rate,"Cumualtive Rec."=cum.rec)#
#
if(plot) plot(cum.rec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,...)#
#
return(rec)#
#
}#
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("nSite", "Number of Sites:",  #
                  min = 1, max = 150, value = 5),#
#
      sliderInput("rpm", "Average Monthly Recruitment",  #
                  min = 0.1, max = 10, value = 1),#
#
      sliderInput("openRate", "Rate of Opening sites (per month):",  #
                  min = 1, max = 5, value = 2),#
#
      sliderInput("maxTime", "Length of Recruitment (months):",  #
                  min = 1, max = 120, value = 12),#
		## Add a stop button for development	        #
      actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	rec <- eventReactive(input$go,{ #
		rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
		})#
	## Plot#
	output$recPlot <- renderPlot({	#
		rec <- rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		## getting guidelines#
		npat <- max(rec[,2])#
		nmon <- nrow(rec)#
		pat.by <- 25*round(npat/125)#
		mon.by <- 3*round(nmon/18)#
		abline(h=seq(0,npat,by=25*round(npat/125)),lty=2,col="lightgray",lwd=3)#
		#v=seq(0,nmon,by=mon.by)#
		})#
	### Stopping App#
   observe({#
      if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
500/7
71*30
(71*30)/100
100/7
20*(100/7)
(20*(100/7))/100
(10*(300/7))/100
(5*(500/7))/100
nSite <- 20#
rmp <- 1#
openRate <- 2#
maxTime <- 24#
penal <- 0.5#
plot <- TRUE#
detail <- TRUE
er of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,Max.Time-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0, monthRate))*penal#
monthRate <- monthRate-penalty#
#
cumRec<-round(cumsum(monthRate)) #
monthRate <- diff(c(0, cumRec))#
#
rec<-data.frame("Monthly Rec"=monthRate,"Cumualtive Rec."= cumRec)
## Getting the number of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,maxTime-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm
nSite <- 20#
rpm <- 1#
openRate <- 2#
maxTime <- 24#
penal <- 0.5#
plot <- TRUE#
detail <- TRUE
## Getting the number of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,maxTime-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0, monthRate))*penal#
monthRate <- monthRate-penalty#
#
cumRec<-round(cumsum(monthRate)) #
monthRate <- diff(c(0, cumRec))
rec<-data.frame("Monthly Rec"=monthRate,"Cumualtive Rec."= cumRec)
rec
plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3)
seq(0,nrow(rec),length=11)
round(seq(0,nrow(rec),length=11)[-1])
det.id <- round(seq(0,nrow(rec),length=11)[-1])
det.id <- round(seq(0,nrow(rec),length=10)[-1])
det.id
if(det.id[length(det.id)]!=nrow(rec)) det.id[length(det.id)] <- nrow(rec)
det.id
rec
text(det.id,rec[det.id,2]+2,rec[det.id,2])
rec[,2]
max(rec[,2])*1.1
plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax),...)
plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax))
ymax <- max(rec[,2])*1.1
plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax))
ymax
text(det.id,rec[det.id,2]+ymax/50,rec[det.id,2])
text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2])
text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=red,font=2)
text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=2,font=2)
hline <- seq(0,ymax,by=50)
hline
ymax <- max(rec[,2])*1.1#
	plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax)) #
	hline <- seq(0,ymax,by=100)#
	if(ymax<501) hline <- seq(0,ymax,by=50)#
	if(ymax<201) hline <- seq(0,ymax,by=25)#
	if(ymax<51) hline <- seq(0,ymax,by=10)#
	vline <- seq(0,maxTime,by=24)#
	if(maxTime < 73) vline <- seq(0,maxTime,by=12)#
	if(maxTime < 37) vline <- seq(0,maxTime,by=6)#
	if(maxTime < 12) vline <- seq(0,maxTime,by=3)#
	abline(h=hline,v=vline,lty=2,col="gray")
det.id <- round(seq(0,nrow(rec),length=11)[-1])#
		if(det.id[length(det.id)]!=nrow(rec)) det.id[length(det.id)] <- nrow(rec)#
		text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=2,font=2)
par(mar=c(5,5,1,1))
plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax))
nSite <- 20#
rpm <- 1#
openRate <- 2#
maxTime <- 24#
penal <- 0.5#
plot <- TRUE#
detail <- TRUE#
#
rec.forcast <- function(nSite,rpm,openRate,maxTime,penal=0.5,plot=TRUE,detail=TRUE,...){ #
#
## Getting the number of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,maxTime-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0, monthRate))*penal#
monthRate <- monthRate-penalty#
#
cumRec<-round(cumsum(monthRate)) #
monthRate <- diff(c(0, cumRec))#
#
rec<-data.frame("Monthly Rec"=monthRate,"Cumualtive Rec."= cumRec) #
if(plot) {#
	ymax <- max(rec[,2])*1.1#
	par(mar=c(5,5,1,1))#
	plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax)) #
	hline <- seq(0,ymax,by=100)#
	if(ymax<501) hline <- seq(0,ymax,by=50)#
	if(ymax<201) hline <- seq(0,ymax,by=25)#
	if(ymax<51) hline <- seq(0,ymax,by=10)#
	vline <- seq(0,maxTime,by=24)#
	if(maxTime < 73) vline <- seq(0,maxTime,by=12)#
	if(maxTime < 37) vline <- seq(0,maxTime,by=6)#
	if(maxTime < 12) vline <- seq(0,maxTime,by=3)#
	abline(h=hline,v=vline,lty=2,col="gray")#
	if(detail){#
		det.id <- round(seq(0,nrow(rec),length=11)[-1])#
		if(det.id[length(det.id)]!=nrow(rec)) det.id[length(det.id)] <- nrow(rec)#
		text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=2,font=2)#
	}#
}#
#
return(rec) #
#
}
rec.forcast(nSite,rpm,openRate,maxTime)
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
######################################################
############# Function #
#
#nSite <- 20#
#rpm <- 1#
#openRate <- 2#
#maxTime <- 24#
#penal <- 0.5#
#plot <- TRUE#
#detail <- TRUE#
#rec.forcast(nSite,rpm,openRate,maxTime)#
#
rec.forcast <- function(nSite,rpm,openRate,maxTime,penal=0.5,plot=TRUE,detail=TRUE,...){ #
#
## Getting the number of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,maxTime-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0, monthRate))*penal#
monthRate <- monthRate-penalty#
#
cumRec<-round(cumsum(monthRate)) #
monthRate <- diff(c(0, cumRec))#
#
rec<-data.frame("Monthly Rec"=monthRate,"Cumualtive Rec."= cumRec) #
if(plot) {#
	ymax <- max(rec[,2])*1.1#
	par(mar=c(5,5,1,1))#
	plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax)) #
	hline <- seq(0,ymax,by=100)#
	if(ymax<501) hline <- seq(0,ymax,by=50)#
	if(ymax<201) hline <- seq(0,ymax,by=25)#
	if(ymax<51) hline <- seq(0,ymax,by=10)#
	vline <- seq(0,maxTime,by=24)#
	if(maxTime < 73) vline <- seq(0,maxTime,by=12)#
	if(maxTime < 37) vline <- seq(0,maxTime,by=6)#
	if(maxTime < 12) vline <- seq(0,maxTime,by=3)#
	abline(h=hline,v=vline,lty=2,col="gray")#
	if(detail){#
		det.id <- round(seq(0,nrow(rec),length=11)[-1])#
		if(det.id[length(det.id)]!=nrow(rec)) det.id[length(det.id)] <- nrow(rec)#
		text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=2,font=2)#
	}#
}#
#
return(rec) #
#
} #
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("nSite", "Number of Sites:",  #
                  min = 1, max = 150, value = 5),#
#
      sliderInput("rpm", "Average Monthly Recruitment",  #
                  min = 0.1, max = 10, value = 1),#
#
      sliderInput("openRate", "Rate of Opening sites (per month):",  #
                  min = 1, max = 5, value = 2),#
#
      sliderInput("maxTime", "Length of Recruitment (months):",  #
                  min = 1, max = 120, value = 12)#
		## Add a stop button for development	        #
      	#actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	#rec <- eventReactive(input$go,{ #
	#	rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
	#	})#
	## Plot#
	output$recPlot <- renderPlot({	#
rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		})#
	### Stopping App#
    #observe({#
    #   if (input$close > 0) stopApp()                             # stop shiny#
    #})#
#
}#
shinyApp(ui, server)
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
######################################################
############# Function #
#
#nSite <- 20#
#rpm <- 1#
#openRate <- 2#
#maxTime <- 24#
#penal <- 0.5#
#plot <- TRUE#
#detail <- TRUE#
#rec.forcast(nSite,rpm,openRate,maxTime)#
#
rec.forcast <- function(nSite,rpm,openRate,maxTime,penal=0.5,plot=TRUE,detail=TRUE,...){ #
#
## Getting the number of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,maxTime-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0, monthRate))*penal#
monthRate <- monthRate-penalty#
#
cumRec<-round(cumsum(monthRate)) #
monthRate <- diff(c(0, cumRec))#
#
rec<-data.frame("Monthly Rec"=monthRate,"Cumualtive Rec."= cumRec) #
if(plot) {#
	ymax <- max(rec[,2])*1.1#
	par(mar=c(5,5,1,1))#
	plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax)) #
	hline <- seq(0,ymax,by=500)#
	if(ymax<2001) hline <- seq(0,ymax,by=250)#
	if(ymax<1001) hline <- seq(0,ymax,by=100)#
	if(ymax<501) hline <- seq(0,ymax,by=50)#
	if(ymax<201) hline <- seq(0,ymax,by=25)#
	if(ymax<51) hline <- seq(0,ymax,by=10)#
	vline <- seq(0,maxTime,by=24)#
	if(maxTime < 73) vline <- seq(0,maxTime,by=12)#
	if(maxTime < 37) vline <- seq(0,maxTime,by=6)#
	if(maxTime < 12) vline <- seq(0,maxTime,by=3)#
	abline(h=hline,v=vline,lty=2,col="gray")#
	if(detail){#
		det.id <- round(seq(0,nrow(rec),length=11)[-1])#
		if(det.id[length(det.id)]!=nrow(rec)) det.id[length(det.id)] <- nrow(rec)#
		text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=2,font=2)#
	}#
}#
#
return(rec) #
#
} #
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("nSite", "Number of Sites:",  #
                  min = 1, max = 150, value = 5),#
#
      sliderInput("rpm", "Average Monthly Recruitment",  #
                  min = 0.1, max = 10, value = 1),#
#
      sliderInput("openRate", "Rate of Opening sites (per month):",  #
                  min = 1, max = 5, value = 2),#
#
      sliderInput("maxTime", "Length of Recruitment (months):",  #
                  min = 1, max = 120, value = 12)#
		## Add a stop button for development	        #
      	#actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	#rec <- eventReactive(input$go,{ #
	#	rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
	#	})#
	## Plot#
	output$recPlot <- renderPlot({	#
rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		})#
	### Stopping App#
    #observe({#
    #   if (input$close > 0) stopApp()                             # stop shiny#
    #})#
#
}#
shinyApp(ui, server)
?plotOutput
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")
?plotOutput
?textOutput
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
######################################################
############# Function #
#
#nSite <- 20#
#rpm <- 1#
#openRate <- 2#
#maxTime <- 24#
#penal <- 0.5#
#plot <- TRUE#
#detail <- TRUE#
#rec.forcast(nSite,rpm,openRate,maxTime)#
#
rec.forcast <- function(nSite,rpm,openRate,maxTime,penal=0.5,plot=TRUE,detail=TRUE,...){ #
#
## Getting the number of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,maxTime-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0, monthRate))*penal#
monthRate <- monthRate-penalty#
#
cumRec<-round(cumsum(monthRate)) #
monthRate <- diff(c(0, cumRec))#
#
rec<-data.frame("Monthly Rec"=monthRate,"Cumualtive Rec."= cumRec) #
if(plot) {#
	ymax <- max(rec[,2])*1.1#
	par(mar=c(5,5,1,1))#
	plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax)) #
	hline <- seq(0,ymax,by=500)#
	if(ymax<2001) hline <- seq(0,ymax,by=250)#
	if(ymax<1001) hline <- seq(0,ymax,by=100)#
	if(ymax<501) hline <- seq(0,ymax,by=50)#
	if(ymax<201) hline <- seq(0,ymax,by=25)#
	if(ymax<51) hline <- seq(0,ymax,by=10)#
	vline <- seq(0,maxTime,by=24)#
	if(maxTime < 73) vline <- seq(0,maxTime,by=12)#
	if(maxTime < 37) vline <- seq(0,maxTime,by=6)#
	if(maxTime < 12) vline <- seq(0,maxTime,by=3)#
	abline(h=hline,v=vline,lty=2,col="gray")#
	if(detail){#
		det.id <- round(seq(0,nrow(rec),length=11)[-1])#
		if(det.id[length(det.id)]!=nrow(rec)) det.id[length(det.id)] <- nrow(rec)#
		text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=2,font=2)#
	}#
}#
#
return(rec) #
#
} #
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("nSite", "Number of Sites:",  #
                  min = 1, max = 150, value = 5),#
#
      sliderInput("rpm", "Average Monthly Recruitment",  #
                  min = 0.1, max = 10, value = 1),#
#
      sliderInput("openRate", "Rate of Opening sites (per month):",  #
                  min = 1, max = 5, value = 2),#
#
      sliderInput("maxTime", "Length of Recruitment (months):",  #
                  min = 1, max = 120, value = 12),#
      textOutput("totalOutput")#
		# Add a stop button for development	        #
      	actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	#rec <- eventReactive(input$go,{ #
	#	rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
	#	})#
	## Total#
	output$totalOutput <- renderText({#
		max(rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,plot=F)[,2])#
	})#
	## Plot#
	output$recPlot <- renderPlot({	#
rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		})#
	### Stopping App#
    observe({#
       if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("nSite", "Number of Sites:",  #
                  min = 1, max = 150, value = 5),#
#
      sliderInput("rpm", "Average Monthly Recruitment",  #
                  min = 0.1, max = 10, value = 1),#
#
      sliderInput("openRate", "Rate of Opening sites (per month):",  #
                  min = 1, max = 5, value = 2),#
#
      sliderInput("maxTime", "Length of Recruitment (months):",  #
                  min = 1, max = 120, value = 12),#
      textOutput("totalOutput")#
		# Add a stop button for development	        #
      	actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
      sliderInput("nSite", "Number of Sites:",  #
                  min = 1, max = 150, value = 5),#
#
      sliderInput("rpm", "Average Monthly Recruitment",  #
                  min = 0.1, max = 10, value = 1),#
#
      sliderInput("openRate", "Rate of Opening sites (per month):",  #
                  min = 1, max = 5, value = 2),#
#
      sliderInput("maxTime", "Length of Recruitment (months):",  #
                  min = 1, max = 120, value = 12),#
      textOutput("totalOutput"),#
		# Add a stop button for development	        #
      	actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	#rec <- eventReactive(input$go,{ #
	#	rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
	#	})#
	## Total#
	output$totalOutput <- renderText({#
		max(rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,plot=F)[,2])#
	})#
	## Plot#
	output$recPlot <- renderPlot({	#
rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		})#
	### Stopping App#
    observe({#
       if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
?sliderInput
?textOutpu
?textOutput
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
######################################################
############# Function #
#
#nSite <- 20#
#rpm <- 1#
#openRate <- 2#
#maxTime <- 24#
#penal <- 0.5#
#plot <- TRUE#
#detail <- TRUE#
#rec.forcast(nSite,rpm,openRate,maxTime)#
#
rec.forcast <- function(nSite,rpm,openRate,maxTime,penal=0.5,plot=TRUE,detail=TRUE,...){ #
#
## Getting the number of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,maxTime-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0, monthRate))*penal#
monthRate <- monthRate-penalty#
#
cumRec<-round(cumsum(monthRate)) #
monthRate <- diff(c(0, cumRec))#
#
rec<-data.frame("Monthly Rec"=monthRate,"Cumualtive Rec."= cumRec) #
if(plot) {#
	ymax <- max(rec[,2])*1.1#
	par(mar=c(5,5,1,1))#
	plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax)) #
	hline <- seq(0,ymax,by=500)#
	if(ymax<2001) hline <- seq(0,ymax,by=250)#
	if(ymax<1001) hline <- seq(0,ymax,by=100)#
	if(ymax<501) hline <- seq(0,ymax,by=50)#
	if(ymax<201) hline <- seq(0,ymax,by=25)#
	if(ymax<51) hline <- seq(0,ymax,by=10)#
	vline <- seq(0,maxTime,by=24)#
	if(maxTime < 73) vline <- seq(0,maxTime,by=12)#
	if(maxTime < 37) vline <- seq(0,maxTime,by=6)#
	if(maxTime < 12) vline <- seq(0,maxTime,by=3)#
	abline(h=hline,v=vline,lty=2,col="gray")#
	if(detail){#
		det.id <- round(seq(0,nrow(rec),length=11)[-1])#
		if(det.id[length(det.id)]!=nrow(rec)) det.id[length(det.id)] <- nrow(rec)#
		text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=2,font=2)#
	}#
}#
#
return(rec) #
#
} #
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		sliderInput("nSite", "Number of Sites:",  #
		                  min = 1, max = 150, value = 5),#
		sliderInput("rpm", "Average Monthly Recruitment",  #
		                  min = 0.1, max = 10, value = 1,step=0.1),#
		sliderInput("openRate", "Rate of Opening sites (per month):",  #
		                  min = 1, max = 5, value = 2,step=0.5),#
		sliderInput("maxTime", "Length of Recruitment (months):",  #
		                  min = 1, max = 120, value = 12),#
		br(),     #
		h3("Total Recruitment"),#
		textOutput("totalOutput"),#
		br(), #
# Add a stop button for development	        #
      	actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	#rec <- eventReactive(input$go,{ #
	#	rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
	#	})#
	## Total#
	output$totalOutput <- renderText({#
		max(rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,plot=F)[,2])#
	})#
	## Plot#
	output$recPlot <- renderPlot({	#
rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		})#
	### Stopping App#
    observe({#
       if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
######################################################
############# Function #
#
#nSite <- 20#
#rpm <- 1#
#openRate <- 2#
#maxTime <- 24#
#penal <- 0.5#
#plot <- TRUE#
#detail <- TRUE#
#rec.forcast(nSite,rpm,openRate,maxTime)#
#
rec.forcast <- function(nSite,rpm,openRate,maxTime,penal=0.5,plot=TRUE,detail=TRUE,...){ #
#
## Getting the number of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,maxTime-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0, monthRate))*penal#
monthRate <- monthRate-penalty#
#
cumRec<-round(cumsum(monthRate)) #
monthRate <- diff(c(0, cumRec))#
#
rec<-data.frame("Monthly Rec"=monthRate,"Cumualtive Rec."= cumRec) #
if(plot) {#
	ymax <- max(rec[,2])*1.1#
	par(mar=c(5,5,1,1))#
	plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax)) #
	hline <- seq(0,ymax,by=500)#
	if(ymax<2001) hline <- seq(0,ymax,by=250)#
	if(ymax<1001) hline <- seq(0,ymax,by=100)#
	if(ymax<501) hline <- seq(0,ymax,by=50)#
	if(ymax<201) hline <- seq(0,ymax,by=25)#
	if(ymax<51) hline <- seq(0,ymax,by=10)#
	vline <- seq(0,maxTime,by=24)#
	if(maxTime < 73) vline <- seq(0,maxTime,by=12)#
	if(maxTime < 37) vline <- seq(0,maxTime,by=6)#
	if(maxTime < 12) vline <- seq(0,maxTime,by=3)#
	abline(h=hline,v=vline,lty=2,col="gray")#
	if(detail){#
		det.id <- round(seq(0,nrow(rec),length=11)[-1])#
		if(det.id[length(det.id)]!=nrow(rec)) det.id[length(det.id)] <- nrow(rec)#
		text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=2,font=2)#
	}#
}#
#
return(rec) #
#
} #
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h3("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		sliderInput("nSite", "Number of Sites:",  #
		                  min = 1, max = 150, value = 5),#
		sliderInput("rpm", "Average Monthly Recruitment",  #
		                  min = 0.1, max = 10, value = 1,step=0.1),#
		sliderInput("openRate", "Rate of Opening sites (per month):",  #
		                  min = 1, max = 5, value = 2,step=0.5),#
		sliderInput("maxTime", "Length of Recruitment (months):",  #
		                  min = 1, max = 120, value = 12),#
		br(),     #
		h5("Total Recruitment"),#
		textOutput("totalOutput"),#
		br(), #
# Add a stop button for development	        #
      	actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	#rec <- eventReactive(input$go,{ #
	#	rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
	#	})#
	## Total#
	output$totalOutput <- renderText({#
		max(rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,plot=F)[,2])#
	})#
	## Plot#
	output$recPlot <- renderPlot({	#
rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		})#
	### Stopping App#
    observe({#
       if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
######################################################
############# Function #
#
#nSite <- 20#
#rpm <- 1#
#openRate <- 2#
#maxTime <- 24#
#penal <- 0.5#
#plot <- TRUE#
#detail <- TRUE#
#rec.forcast(nSite,rpm,openRate,maxTime)#
#
rec.forcast <- function(nSite,rpm,openRate,maxTime,penal=0.5,plot=TRUE,detail=TRUE,...){ #
#
## Getting the number of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,maxTime-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0, monthRate))*penal#
monthRate <- monthRate-penalty#
#
cumRec<-round(cumsum(monthRate)) #
monthRate <- diff(c(0, cumRec))#
#
rec<-data.frame("Monthly Rec"=monthRate,"Cumualtive Rec."= cumRec) #
if(plot) {#
	ymax <- max(rec[,2])*1.1#
	par(mar=c(5,5,1,1))#
	plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax)) #
	hline <- seq(0,ymax,by=500)#
	if(ymax<2001) hline <- seq(0,ymax,by=250)#
	if(ymax<1001) hline <- seq(0,ymax,by=100)#
	if(ymax<501) hline <- seq(0,ymax,by=50)#
	if(ymax<201) hline <- seq(0,ymax,by=25)#
	if(ymax<51) hline <- seq(0,ymax,by=10)#
	vline <- seq(0,maxTime,by=24)#
	if(maxTime < 73) vline <- seq(0,maxTime,by=12)#
	if(maxTime < 37) vline <- seq(0,maxTime,by=6)#
	if(maxTime < 12) vline <- seq(0,maxTime,by=3)#
	abline(h=hline,v=vline,lty=2,col="gray")#
	if(detail){#
		det.id <- round(seq(0,nrow(rec),length=11)[-1])#
		if(det.id[length(det.id)]!=nrow(rec)) det.id[length(det.id)] <- nrow(rec)#
		text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=2,font=2)#
	}#
}#
#
return(rec) #
#
} #
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h3("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		sliderInput("nSite", "Number of Sites:",  #
		                  min = 1, max = 150, value = 5),#
		sliderInput("rpm", "Average Monthly Recruitment",  #
		                  min = 0.1, max = 10, value = 1,step=0.1),#
		sliderInput("openRate", "Rate of Opening sites (per month):",  #
		                  min = 1, max = 5, value = 2,step=0.5),#
		sliderInput("maxTime", "Length of Recruitment (months):",  #
		                  min = 1, max = 120, value = 12),#
		br(),     #
		h5("Total Recruitment"),#
		textOutput("totalOutput",inline=T),#
		br(), #
# Add a stop button for development	        #
      	actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	#rec <- eventReactive(input$go,{ #
	#	rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
	#	})#
	## Total#
	output$totalOutput <- renderText({#
		max(rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,plot=F)[,2])#
	})#
	## Plot#
	output$recPlot <- renderPlot({	#
rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		})#
	### Stopping App#
    observe({#
       if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
renderOutput
?renderText
?printOutput
??printOutput
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
######################################################
############# Function #
#
#nSite <- 20#
#rpm <- 1#
#openRate <- 2#
#maxTime <- 24#
#penal <- 0.5#
#plot <- TRUE#
#detail <- TRUE#
#rec.forcast(nSite,rpm,openRate,maxTime)#
#
rec.forcast <- function(nSite,rpm,openRate,maxTime,penal=0.5,plot=TRUE,detail=TRUE,...){ #
#
## Getting the number of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,maxTime-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0, monthRate))*penal#
monthRate <- monthRate-penalty#
#
cumRec<-round(cumsum(monthRate)) #
monthRate <- diff(c(0, cumRec))#
#
rec<-data.frame("Monthly Rec"=monthRate,"Cumualtive Rec."= cumRec) #
if(plot) {#
	ymax <- max(rec[,2])*1.1#
	par(mar=c(5,5,1,1))#
	plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax)) #
	hline <- seq(0,ymax,by=500)#
	if(ymax<2001) hline <- seq(0,ymax,by=250)#
	if(ymax<1001) hline <- seq(0,ymax,by=100)#
	if(ymax<501) hline <- seq(0,ymax,by=50)#
	if(ymax<201) hline <- seq(0,ymax,by=25)#
	if(ymax<51) hline <- seq(0,ymax,by=10)#
	vline <- seq(0,maxTime,by=24)#
	if(maxTime < 73) vline <- seq(0,maxTime,by=12)#
	if(maxTime < 37) vline <- seq(0,maxTime,by=6)#
	if(maxTime < 12) vline <- seq(0,maxTime,by=3)#
	abline(h=hline,v=vline,lty=2,col="gray")#
	if(detail){#
		det.id <- round(seq(0,nrow(rec),length=11)[-1])#
		if(det.id[length(det.id)]!=nrow(rec)) det.id[length(det.id)] <- nrow(rec)#
		text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=2,font=2)#
	}#
}#
#
return(rec) #
#
} #
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		sliderInput("nSite", "Number of Sites:",  #
		                  min = 1, max = 150, value = 5),#
		sliderInput("rpm", "Average Monthly Recruitment",  #
		                  min = 0.1, max = 10, value = 1,step=0.1),#
		sliderInput("openRate", "Rate of Opening sites (per month):",  #
		                  min = 1, max = 5, value = 2,step=0.5),#
		sliderInput("maxTime", "Length of Recruitment (months):",  #
		                  min = 1, max = 120, value = 12),#
#
		# Add a stop button for development	        #
      	# actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	#rec <- eventReactive(input$go,{ #
	#	rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
	#	})#
	## Total#
	output$totalOutput <- renderText({#
		max(rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,plot=F)[,2])#
	})#
	## Plot#
	output$recPlot <- renderPlot({	#
rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		})#
	### Stopping App#
    # observe({#
    #    if (input$close > 0) stopApp()                             # stop shiny#
    # })#
#
}#
shinyApp(ui, server)
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
######################################################
############# Function #
#
#nSite <- 20#
#rpm <- 1#
#openRate <- 2#
#maxTime <- 24#
#penal <- 0.5#
#plot <- TRUE#
#detail <- TRUE#
#rec.forcast(nSite,rpm,openRate,maxTime)#
#
rec.forcast <- function(nSite,rpm,openRate,maxTime,penal=0.5,plot=TRUE,detail=TRUE,...){ #
#
## Getting the number of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,maxTime-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0, monthRate))*penal#
monthRate <- monthRate-penalty#
#
cumRec<-round(cumsum(monthRate)) #
monthRate <- diff(c(0, cumRec))#
#
rec<-data.frame("Monthly Rec"=monthRate,"Cumualtive Rec."= cumRec) #
if(plot) {#
	ymax <- max(rec[,2])*1.1#
	par(mar=c(5,5,1,1))#
	plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax)) #
	hline <- seq(0,ymax,by=500)#
	if(ymax<2001) hline <- seq(0,ymax,by=250)#
	if(ymax<1001) hline <- seq(0,ymax,by=100)#
	if(ymax<501) hline <- seq(0,ymax,by=50)#
	if(ymax<201) hline <- seq(0,ymax,by=25)#
	if(ymax<51) hline <- seq(0,ymax,by=10)#
	vline <- seq(0,maxTime,by=24)#
	if(maxTime < 73) vline <- seq(0,maxTime,by=12)#
	if(maxTime < 37) vline <- seq(0,maxTime,by=6)#
	if(maxTime < 12) vline <- seq(0,maxTime,by=3)#
	abline(h=hline,v=vline,lty=2,col="gray")#
	if(detail){#
		det.id <- round(seq(0,nrow(rec),length=11)[-1])#
		if(det.id[length(det.id)]!=nrow(rec)) det.id[length(det.id)] <- nrow(rec)#
		text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=2,font=2)#
	}#
}#
#
return(rec) #
#
}
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		sliderInput("nSite", "Number of Sites:",  #
		                  min = 1, max = 150, value = 5),#
		sliderInput("rpm", "Average Monthly Recruitment",  #
		                  min = 0.1, max = 10, value = 1,step=0.1),#
		sliderInput("openRate", "Rate of Opening sites (per month):",  #
		                  min = 1, max = 5, value = 2,step=0.5),#
		sliderInput("maxTime", "Length of Recruitment (months):",  #
		                  min = 1, max = 120, value = 12)#
#
		# Add a stop button for development	        #
      	# actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
    )#
  )#
)
#############
server <- function(input, output) {#
#
	#rec <- eventReactive(input$go,{ #
	#	rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
	#	})#
	## Total#
	output$totalOutput <- renderText({#
		max(rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,plot=F)[,2])#
	})#
	## Plot#
	output$recPlot <- renderPlot({	#
rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		})#
	### Stopping App#
    # observe({#
    #    if (input$close > 0) stopApp()                             # stop shiny#
    # })#
#
}#
shinyApp(ui, server)
library(shiny)
?textOutput
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
######################################################
############# Function #
#
#nSite <- 20#
#rpm <- 1#
#openRate <- 2#
#maxTime <- 24#
#penal <- 0.5#
#plot <- TRUE#
#detail <- TRUE#
#rec.forcast(nSite,rpm,openRate,maxTime)#
#
rec.forcast <- function(nSite,rpm,openRate,maxTime,penal=0.5,plot=TRUE,detail=TRUE,...){ #
#
## Getting the number of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,maxTime-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0, monthRate))*penal#
monthRate <- monthRate-penalty#
#
cumRec<-round(cumsum(monthRate)) #
monthRate <- diff(c(0, cumRec))#
#
rec<-data.frame("Monthly Rec"=monthRate,"Cumualtive Rec."= cumRec) #
if(plot) {#
	ymax <- max(rec[,2])*1.1#
	par(mar=c(5,5,1,1))#
	plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax)) #
	hline <- seq(0,ymax,by=500)#
	if(ymax<2001) hline <- seq(0,ymax,by=250)#
	if(ymax<1001) hline <- seq(0,ymax,by=100)#
	if(ymax<501) hline <- seq(0,ymax,by=50)#
	if(ymax<201) hline <- seq(0,ymax,by=25)#
	if(ymax<51) hline <- seq(0,ymax,by=10)#
	vline <- seq(0,maxTime,by=24)#
	if(maxTime < 73) vline <- seq(0,maxTime,by=12)#
	if(maxTime < 37) vline <- seq(0,maxTime,by=6)#
	if(maxTime < 12) vline <- seq(0,maxTime,by=3)#
	abline(h=hline,v=vline,lty=2,col="gray")#
	if(detail){#
		det.id <- round(seq(0,nrow(rec),length=11)[-1])#
		if(det.id[length(det.id)]!=nrow(rec)) det.id[length(det.id)] <- nrow(rec)#
		text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=2,font=2)#
	}#
}#
#
return(rec) #
#
} #
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		sliderInput("nSite", "Number of Sites:",  #
		                  min = 1, max = 150, value = 5),#
		sliderInput("rpm", "Average Monthly Recruitment",  #
		                  min = 0.1, max = 10, value = 1,step=0.1),#
		sliderInput("openRate", "Rate of Opening sites (per month):",  #
		                  min = 1, max = 5, value = 2,step=0.5),#
		sliderInput("maxTime", "Length of Recruitment (months):",  #
		                  min = 1, max = 120, value = 12)#
#
		# Add a stop button for development	        #
      	# actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot")#
      textOutput("protLang")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	#rec <- eventReactive(input$go,{ #
	#	rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
	#	})#
	## Total#
	output$totalOutput <- renderText({#
		max(rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,plot=F)[,2])#
	})#
	## Plot#
	output$recPlot <- renderPlot({	#
rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		})#
	### Protocol Language#
	output$protLang <- renderText("Protocol Language")#
#
	### Stopping App#
     observe({#
        if (input$close > 0) stopApp()                             # stop shiny#
     })#
#
}#
shinyApp(ui, server)
#install.packages("shiny")#
library(shiny)#
#source("recForcast.R")#
######################################################
############# Function #
#
#nSite <- 20#
#rpm <- 1#
#openRate <- 2#
#maxTime <- 24#
#penal <- 0.5#
#plot <- TRUE#
#detail <- TRUE#
#rec.forcast(nSite,rpm,openRate,maxTime)#
#
rec.forcast <- function(nSite,rpm,openRate,maxTime,penal=0.5,plot=TRUE,detail=TRUE,...){ #
#
## Getting the number of open sites per month#
openSite <-seq(1, nSite,by= openRate)#
#
if(max(openSite)!= nSite) openSite <- c(openSite, nSite)#
#
if(length(openSite)<maxTime){#
openSite <-c(openSite,rep(nSite,maxTime-length(openSite))) #
} else {#
openSite <- openSite[1:maxTime]#
warning("Not enough time to open all sites!")#
}#
### Basic average rate per site approach#
monthRate<-openSite*rpm#
## penalisng monthly recruitment (recruits 1/2 as much in first month)#
penalty <- diff(c(0, monthRate))*penal#
monthRate <- monthRate-penalty#
#
cumRec<-round(cumsum(monthRate)) #
monthRate <- diff(c(0, cumRec))#
#
rec<-data.frame("Monthly Rec"=monthRate,"Cumualtive Rec."= cumRec) #
if(plot) {#
	ymax <- max(rec[,2])*1.1#
	par(mar=c(5,5,1,1))#
	plot(cumRec,typ="l",xlab="Time (Months)",ylab="Cumulative Recruitment",font.lab=3,ylim=c(0,ymax)) #
	hline <- seq(0,ymax,by=500)#
	if(ymax<2001) hline <- seq(0,ymax,by=250)#
	if(ymax<1001) hline <- seq(0,ymax,by=100)#
	if(ymax<501) hline <- seq(0,ymax,by=50)#
	if(ymax<201) hline <- seq(0,ymax,by=25)#
	if(ymax<51) hline <- seq(0,ymax,by=10)#
	vline <- seq(0,maxTime,by=24)#
	if(maxTime < 73) vline <- seq(0,maxTime,by=12)#
	if(maxTime < 37) vline <- seq(0,maxTime,by=6)#
	if(maxTime < 12) vline <- seq(0,maxTime,by=3)#
	abline(h=hline,v=vline,lty=2,col="gray")#
	if(detail){#
		det.id <- round(seq(0,nrow(rec),length=11)[-1])#
		if(det.id[length(det.id)]!=nrow(rec)) det.id[length(det.id)] <- nrow(rec)#
		text(det.id,rec[det.id,2]+ymax/25,rec[det.id,2],col=2,font=2)#
	}#
}#
#
return(rec) #
#
} #
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Recruitment Estimates"),#
  	h4("This page gives a basic funtion for estimating recruitment forecasts for clinical trials.  Inputs required are: The number of sites available, average rate of recruitment, the rate of opening sites to recruitment and the length of time available"),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		sliderInput("nSite", "Number of Sites:",  #
		                  min = 1, max = 150, value = 5),#
		sliderInput("rpm", "Average Monthly Recruitment",  #
		                  min = 0.1, max = 10, value = 1,step=0.1),#
		sliderInput("openRate", "Rate of Opening sites (per month):",  #
		                  min = 1, max = 5, value = 2,step=0.5),#
		sliderInput("maxTime", "Length of Recruitment (months):",  #
		                  min = 1, max = 120, value = 12)#
#
		# Add a stop button for development	        #
      	# actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("recPlot"),#
      textOutput("protLang")#
    )#
  )#
)#
#############
server <- function(input, output) {#
#
	#rec <- eventReactive(input$go,{ #
	#	rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime)#
	#	})#
	## Total#
	output$totalOutput <- renderText({#
		max(rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,plot=F)[,2])#
	})#
	## Plot#
	output$recPlot <- renderPlot({	#
rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		})#
	### Protocol Language#
	output$protLang <- renderText("Protocol Language")#
#
	### Stopping App#
     observe({#
        if (input$close > 0) stopApp()                             # stop shiny#
     })#
#
}#
shinyApp(ui, server)
ibrary()
library(shiny)
?slectionInput
?selectionInput
?sliderInput
#install.packages("shiny")#
library(shiny)#
######################################################
############# Function #
#
######################################################
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Survival Functions"),#
  	h4("This page shows the shape and behaviour of basic survival functions."),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		selectInput("suvFunc", "Distribution:",  #
		                  c("Exponential","Weibull","Loglogistic","Lognormal","Peicewise Exponential")),#
		## Add a stop button for development	        #
      	actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("survPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
	## Plot#
	output$survPlot <- renderPlot({	#
rec.forcast(input$nSite,input$rpm,input$openRate,input$maxTime,cex.axis=1.2,cex.lab=1.3,col="lightblue",lwd=6)#
		})#
	## Stopping App#
    observe({#
    		if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
#install.packages("shiny")#
library(shiny)#
######################################################
############# Function #
#
######################################################
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Survival Functions"),#
  	h4("This page shows the shape and behaviour of basic survival functions."),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		selectInput("suvFunc", "Distribution:",  #
		                  c("Exponential","Weibull","Loglogistic","Lognormal","Peicewise Exponential")),#
		## Add a stop button for development	        #
      	actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("survPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
	## Plot#
	output$survPlot <- renderPlot({	#
		hist(rnorm(100))#
	})#
	## Stopping App#
    observe({#
    		if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
#install.packages("shiny")#
library(shiny)#
######################################################
############# Function #
#
######################################################
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Survival Functions"),#
  	h4("This page shows the shape and behaviour of basic survival functions."),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		selectInput("suvFunc", "Distribution:",  #
		                  c("Exponential","Weibull","Loglogistic","Lognormal","Peicewise Exponential")),#
		uiOutput("selectDemo"),#
#
		## Add a stop button for development	        #
      	actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("survPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
	output$selectDemo <- renderUI({#
		selectInput(inputId = "demoCor2",#
	    label = "Demographic Factors",#
	    choices = names(dat()[[2]]))#
	})#
#
	## Plot#
	output$survPlot <- renderPlot({	#
		hist(rnorm(100))#
	})#
	## Stopping App#
    observe({#
    		if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
?sliderInput
#install.packages("shiny")#
library(shiny)#
######################################################
############# Function #
#
######################################################
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Survival Functions"),#
  	h4("This page shows the shape and behaviour of basic survival functions."),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		selectInput("suvFunc", "Distribution:",  #
		                  c("Exponential","Weibull","Loglogistic","Lognormal","Peicewise Exponential")),#
		uiOutput("selectDemo"),#
#
		## Add a stop button for development	        #
      	actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("survPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
	output$selectDemo <- renderUI({#
		sliderInput(inputId = "hazRate1",label = "Hazard Rate",0,0.5,step=0.01,value=0.05)#
	})#
#
	## Plot#
	output$survPlot <- renderPlot({	#
		hist(rnorm(100))#
	})#
	## Stopping App#
    observe({#
    		if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
survFunction <- function(time,parm,dist="Exponential"){#
	if(dist="Exponential"){#
		S <- exp(time*parm[1])#
	}#
	S#
}
survFunction <- function(time,parm,dist="exponential"){#
	if(dist=="exponential"){#
		S <- exp(time*parm[1])#
	}#
	S#
}
#install.packages("shiny")#
library(shiny)#
######################################################
############# Function #
#
survFunction <- function(time,parm,dist="exponential"){#
	if(dist=="exponential"){#
		S <- exp(time*parm[1])#
	}#
	S#
}#
#
######################################################
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Survival Functions"),#
  	h4("This page shows the shape and behaviour of basic survival functions."),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		selectInput("suvFunc", "Distribution:",  #
		                  c("Exponential","Weibull","Loglogistic","Lognormal","Peicewise Exponential")),#
		uiOutput("selectDemo"),#
#
		## Add a stop button for development	        #
      	actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("survPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
	output$selectDemo <- renderUI({#
		sliderInput(inputId = "hazRate1",label = "Hazard Rate",0,0.5,step=0.01,value=0.05)#
	})#
#
	## Plot#
	output$survPlot <- renderPlot({	#
		time <- c(0,24,by=0.25)#
		surv <- survFunction(time,input$hazRate1,dist="Exponential")#
		plot(time,surv)#
	})#
	## Stopping App#
    observe({#
    		if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
surv <- survFunction(time,input$hazRate1,dist="Exponential")
surv <- survFunction(time,0.05,dist="Exponential")
survFunction <- function(time,parm,dist="exponential"){#
	if(dist=="exponential"){#
		S <- exp(time*parm[1])#
	}#
	S#
}
surv <- survFunction(time,0.05,dist="Exponential")
survFunction <- function(time,parm,dist="exponential"){#
	if(dist=="exponential"){#
		S <- exp(time*parm[1])#
	}#
	S #
}
surv <- survFunction(time,0.05,dist="Exponential")
survFunction <- function(time,parm,dist="exponential"){#
	if(dist=="exponential"){#
		S <- exp(time*parm[1])#
	}#
	exp(time*parm[1])#
}
surv <- survFunction(time,0.05,dist="Exponential")
time
time <- c(0,24,by=0.25)
time
time <- seq(0,24,by=0.25)
surv <- survFunction(time,0.05,dist="Exponential")
surv
survFunction <- function(time,parm,dist="exponential"){#
	if(dist=="exponential"){#
		S <- exp(time*parm[1])#
	}#
	S#
}
#install.packages("shiny")#
library(shiny)#
######################################################
############# Function #
#
survFunction <- function(time,parm,dist="exponential"){#
	if(dist=="exponential"){#
		S <- exp(time*parm[1])#
	}#
	S#
}#
#
######################################################
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Survival Functions"),#
  	h4("This page shows the shape and behaviour of basic survival functions."),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		selectInput("suvFunc", "Distribution:",  #
		                  c("Exponential","Weibull","Loglogistic","Lognormal","Peicewise Exponential")),#
		uiOutput("selectDemo"),#
#
		## Add a stop button for development	        #
      	actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("survPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
	output$selectDemo <- renderUI({#
		sliderInput(inputId = "hazRate1",label = "Hazard Rate",0,0.5,step=0.01,value=0.05)#
	})#
#
	## Plot#
	output$survPlot <- renderPlot({	#
		time <- seq(0,24,by=0.25)#
		surv <- survFunction(time,input$hazRate1,dist="Exponential")#
		plot(time,surv)#
	})#
	## Stopping App#
    observe({#
    		if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
survFunction <- function(time,parm,dist="exponential"){#
	if(dist=="exponential"){#
		S <- exp(time*parm[1])#
	}#
	S#
}
surv <- survFunction(time,0.05,dist="Exponential")
time
exp(time*0.05)
S <- exp(-time*parm[1])
survFunction <- function(time,parm,dist="exponential"){#
	if(dist=="exponential"){#
		S <- exp(-time*parm)#
	}#
	S#
}
surv <- survFunction(time,0.05,dist="Exponential")
surv <- survFunction(time,0.05,dist="exponential")
surv
survFunction <- function(time,parm,dist="Exponential"){#
	if(dist=="Exponential"){#
		S <- exp(-time*parm)#
	}#
	S#
}
#install.packages("shiny")#
library(shiny)#
######################################################
############# Function #
#
survFunction <- function(time,parm,dist="Exponential"){#
	if(dist=="Exponential"){#
		S <- exp(-time*parm)#
	}#
	S#
}#
#
######################################################
##############################
##############################
# Define UI for dataset viewer app ----#
ui <- fluidPage(#
#
	#includeCSS("bootstrap.css"),#
#
  	titlePanel("Survival Functions"),#
  	h4("This page shows the shape and behaviour of basic survival functions."),#
#
  sidebarLayout(#
#
    sidebarPanel(#
		selectInput("suvFunc", "Distribution:",  #
		                  c("Exponential","Weibull","Loglogistic","Lognormal","Peicewise Exponential")),#
		uiOutput("selectDemo"),#
#
		## Add a stop button for development	        #
      	actionButton("close",label="stop")#
    ),#
#
    mainPanel(#
      plotOutput("survPlot")#
    )#
  )#
)#
#############
server <- function(input, output) {#
	output$selectDemo <- renderUI({#
		sliderInput(inputId = "hazRate1",label = "Hazard Rate",0,0.5,step=0.01,value=0.05)#
	})#
#
	## Plot#
	output$survPlot <- renderPlot({	#
		time <- seq(0,24,by=0.25)#
		surv <- survFunction(time,input$hazRate1,dist="Exponential")#
		plot(time,surv)#
	})#
	## Stopping App#
    observe({#
    		if (input$close > 0) stopApp()                             # stop shiny#
    })#
#
}#
shinyApp(ui, server)
